#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Cinder API availability and performance script
#
# Author:
#   Chris Chandler <cjchand@gmail.com>

from cinderclient import client
from statsd import StatsClient
import logging

# Populate variables from ../vars/main.yaml
auth_url      = "{{ openstack.auth_url }}"
username      = "{{ openstack.username }}"
password      = "{{ openstack.password }}"
region        = "{{ openstack.region }}"
tenant        = "{{ openstack.tenant }}"
req_count     =  {{ openstack.flavor_count }}
version       =  {{ openstack.version }}
statsd_host   = "{{ metrics.statsd_host }}"
statsd_port   =  {{ metrics.statsd_port }}
statsd_prefix = "{{ metrics.statsd_prefix }}" + "cinder"

statsd_client = StatsClient(host=statsd_host, port=statsd_port, prefix=statsd_prefix)
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                    filename='/var/log/openstack-api-availability/check_cinder_api.log')
try:
    cinder_api_timer = statsd_client.timer('response_time')
    cinder_client = client.Client(int(version), username, password, tenant, auth_url)
    volume_count = 0
    cinder_api_timer.start()
    volume_list = cinder_client.volumes.list()
    cinder_api_timer.stop()
    for volume in volume_list:
        volume_count += 1

    if req_count and volume_count < int(req_count):
        logging.info("CRITICAL: Number of volumes found: %d less than required %d" % (volume_count, int(req_count)))
        statsd_client.incr('result.fail')

    if req_count: 
        logging.info("OK: Retrieved %d volumes, required %d" % (volume_count, int(req_count)))
        statsd_client.incr('result.pass')
    else:
        logging.info("OK: Retrieved volumes. Volume count is %d" % (volume_count))
        statsd_client.incr('result.pass')

except Exception as e:
    logging.info("CRITICAL:Unable to retrieve volumes for tenant %s" % (tenant))
    statsd_client.incr('result.fail')
