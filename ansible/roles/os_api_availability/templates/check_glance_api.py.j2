#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Glance API availability and performance script
#
# Author:
#   Chris Chandler <cjchand@gmail.com>

from keystoneclient.auth.identity import v2 as keystoneIdentity
from keystoneclient import session as keystoneSession
from glanceclient import Client as glanceClient
from statsd import StatsClient
import logging

# Populate variables from ../vars/main.yaml
auth_url        = "{{ openstack.auth_url }}"
username        = "{{ openstack.username }}"
password        = "{{ openstack.password }}"
region          = "{{ openstack.region }}"
tenant          = "{{ openstack.tenant }}"
req_count       =  {{ openstack.flavor_count }}
version         =  {{ openstack.version }}
glance_endpoint = "{{ openstack.glance_url }}"
statsd_host     = "{{ metrics.statsd_host }}"
statsd_port     =  {{ metrics.statsd_port }}
statsd_prefix   = "{{ metrics.statsd_prefix }}" + "glance"

statsd_client = StatsClient(host=statsd_host, port=statsd_port, prefix=statsd_prefix)
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                    filename='/var/log/openstack-api-availability/check_glance_api.log')

try:
    # Glanceclient is in that it requires a token and won't allow basic auth like the rest of the OS clients
    auth = keystoneIdentity.Password(auth_url=auth_url,
                                     username=username,
                                     password=password,
                                     tenant_name=tenant)
    session = keystoneSession.Session(auth=auth)
    token = auth.get_token(session)
    glance_api_timer = statsd_client.timer('response_time')
    glance_client = glanceClient('1', endpoint=glance_endpoint, token=token)
    image_count = 0
    glance_api_timer.start()
    image_list = glance_client.images.list()
    glance_api_timer.stop()
    while True:
        try:
            image = image_list.next()
            image_count += 1
        except StopIteration:
            break
    if req_count and image_count < int(req_count):
        logging.info("CRITICAL: %d images found less than required %d" % (image_count, int(req_count)))
        statsd_client.incr('result.fail')

    if req_count:
        logging.info("OK: Retrieved %d images, required %d" % (image_count, int(req_count)))
        statsd_client.incr('result.pass')
    else:
        logging.info("OK: Retrieved %d images" % (image_count))
        statsd_client.incr('result.pass')

except Exception as e:
    logging.info(e)
    logging.info('CRITICAL: Failed to retrieve images for tenant %s and user %s' % (tenant, username))
    statsd_client.incr('result.fail')
